#!/usr/bin/env bash

FILE=/tmp/.tricks.yaml
HTTP_PORT=8080

function get_api_server {
  ###
  # Return the API server of the current context.
  ###

  kubectl config view --minify=true | grep server | awk '{ print $2 }'
}

function get_api_token {
  ###
  # Return the API server token of the current context.
  ###

  local _secret=$(kubectl get secrets | grep default | awk '{ print $1 }')
  kubectl describe secret ${_secret} | grep -E "^token" | awk '{ print $2 }'
}

# https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/#accessing-the-api-from-a-pod
K8S_API_SERVER=$(get_api_server)
K8S_API_TOKEN=$(get_api_token)

## create deployment file
cat <<EOF > ${FILE}
apiVersion: v1
kind: Pod
metadata:
  name: tricks
  labels:
    tricks: "true"
spec:
  restartPolicy: Never
  containers:
  - name: tricks
    image: vitorenesduarte/tricks
    imagePullPolicy: Never
    env:
    - name: POD_IP 
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: K8S_API_SERVER
      value: "${K8S_API_SERVER}"
    - name: K8S_API_TOKEN
      value: "${K8S_API_TOKEN}"
EOF

function get_pod_status {
  ###
  # Returns one of:
  #  - Running
  #  - Terminating
  #  - NotFound
  ###

  kubectl get -f ${FILE} 2>&1 | grep -oE "(Running|Terminating|NotFound)"
}

function get_service_status {
  ###
  # Returns one of:
  #  - NotFound
  ###

  kubectl get service tricks 2>&1 | grep -oE "(NotFound)"
}

function get_service_url {
  ###
  # Return tricks service http endpoint.
  ###

  # TODO check if context is minikube
  minikube service tricks --url 2> /dev/null
}

function start {
  ###
  # Start tricks if not found in the cluster.
  # If in the cluster, it is assumed it is
  # configured correclty.
  ###
  local _status=$(get_pod_status)
  local _url=$(get_service_url)

  if [ "${_status}" == "NotFound" ]; then
    echo "Starting Tricks..."
    kubectl create -f ${FILE}
    kubectl expose pod tricks --type=NodePort --port=${HTTP_PORT}

    echo "Configuring Tricks..."
    while [ -z "${_url}" ]; do
      _url=$(get_service_url)
      sleep 1
    done

    echo "Tricks configured correctly!"

  else
    if [ -z "${_url}" ]; then
      echo "Tricks is running, but not configured correctly!"
    fi
  fi
}

function stop {
  ###
  # Loop while tricks pod exists.
  # Loop while tricks service exists.
  ###
  local _pod_status=$(get_pod_status)
  local _service_status=$(get_service_status)

  while [ "${_pod_status}" != "NotFound" ]; do
    sleep 1
    kubectl delete -f ${FILE} --now > /dev/null 2>&1
    _pod_status=$(get_pod_status)
  done

  while [ "${_service_status}" != "NotFound" ]; do
    sleep 1
    kubectl delete service tricks > /dev/null 2>&1
    _service_status=$(get_service_status)
  done
}

function logs {
  ###
  # Tail the logs forever.
  ###

  kubectl logs -f tricks
}

function experiment {
  local _yaml=$1
  local _json=/tmp/exp.json
  local _url=$(get_service_url)
  local _endpoint=${_url}/exp

  if [ ! -f ${_yaml} ]; then
    echo "File ${_yaml} not found!"
    exit 1
  fi

  # convert yaml user file to json
  local _cmd="import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)"
  python -c "${_cmd}" < ${_yaml} > ${_json}

  # post json in service endpoint
  curl -H "Content-Type: application/json" -X POST -d @"${_json}" ${_endpoint}
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  logs)
    logs
    ;;
  exp)
    if [ $# -ne 2 ]; then
      echo "Usage: tricks exp FILE"
      exit 1
    fi
    start
    experiment $2
    ;;
  *)
    echo "Usage: tricks {start|exp}"
    exit 1
esac
